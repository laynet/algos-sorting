1. Implement a solution for bubble sort.
var arr = [5, 2, 10, 8, 1, 11, 7];

let bubbleSort = (inputArr) => {
    let len = inputArr.length;
    let swapped;
    do {
        swapped = false;
        for (let i = 0; i < len; i++) {
            if (inputArr[i] > inputArr[i + 1]) {
                let tmp = inputArr[i];
                inputArr[i] = inputArr[i + 1];
                inputArr[i + 1] = tmp;
                swapped = true;
            }
        }
    } while (swapped);
    return inputArr;
};

console.log(bubbleSort(arr))

2. Write pseudocode for quicksort.
FUNCTION quickSort(collection)
  IF collection.length <= 1 THEN
    RETURN collection
  END IF

  SET PIVOT POINT to collection - 1
  SET LEFT to empty array
  SET RIGHT to empty array
  SET NEWARRAY to empty array

  FOR i = FIRST INDEX of collection to LAST INDEX of collection
      IF collection[i] > PIVOT POINT THEN
        PUSH collection[i] to RIGHT
      ELSE
        PUSH collection[i] to LEFT
      END IF
  END FOR

  RETURN NEWARRAY CONCATENATING(quickSort(left), pivot, quicksort(right))
END FUNCTION

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.
Merge and quick sort have a better time complexity because of splitting the data and having two loops, especially with huge data sets. For example, selection sort is always 0(N2) even if the array is sorted and bubble sort has a worst case of 0(N2) and a best case of 0(N).
4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?
Bucket sort works by distributing the elements of an array into a number of buckets then each bucked is sorted individually by either using a different sorting algorithm or by recursively applying the bucket sorting algorithm. Bucket sort is a non-comparison based sorting algorithm that assumes itâ€™s possible to create an array of buckets to be sorted by using index as value, so you would ideally want something like an array where you can obtain an index for each item.